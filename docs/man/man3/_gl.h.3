.TH "incs/_gl.h" 3 "Thu Oct 12 2017" "Version 0.0.1" "_gl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
incs/_gl.h
.SH SYNOPSIS
.br
.PP
\fC#include <glfw3\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBs_callback\fP"
.br
.ti -1c
.RI "struct \fBs_fps\fP"
.br
.ti -1c
.RI "struct \fBs_renderer\fP"
.br
.ti -1c
.RI "struct \fBs_window\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGLFW_INCLUDE_GLCOREARB\fP"
.br
.ti -1c
.RI "#define \fBGLFW_INCLUDE_GLEXT\fP"
.br
.ti -1c
.RI "#define \fBPARTICULE_WIDTH\fP   1024"
.br
.ti -1c
.RI "#define \fBPARTICULE_HEIGHT\fP   1024"
.br
.ti -1c
.RI "#define \fBVNBR\fP   (\fBPARTICULE_WIDTH\fP * \fBPARTICULE_HEIGHT\fP)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int t_vec2i \fB__attribute__\fP((ext_vector_type(2)))"
.br
.ti -1c
.RI "typedef struct \fBs_mlx_context\fP \fBt_mlx_context\fP"
.br
.ti -1c
.RI "typedef struct \fBs_window\fP \fBt_window\fP"
.br
.ti -1c
.RI "typedef struct \fBs_image_list\fP \fBt_image\fP"
.br
.ti -1c
.RI "typedef void(* \fBMLXinitearlyfun\fP) (\fBt_mlx_context\fP *)"
.br
.ti -1c
.RI "typedef void(* \fBMLXinitlatefun\fP) (\fBt_mlx_context\fP *)"
.br
.ti -1c
.RI "typedef void(* \fBMLXwindowclosefun\fP) (\fBt_mlx_context\fP *, \fBt_window\fP *)"
.br
.ti -1c
.RI "typedef void(* \fBMLXwindowresize\fP) (\fBt_mlx_context\fP *, \fBt_window\fP *)"
.br
.ti -1c
.RI "typedef void(* \fBMLXloopearlyfun\fP) (\fBt_mlx_context\fP *)"
.br
.ti -1c
.RI "typedef void(* \fBMLXlooplatefun\fP) (\fBt_mlx_context\fP *)"
.br
.ti -1c
.RI "typedef int(* \fBMLXloopfun\fP) (void *param)"
.br
.ti -1c
.RI "typedef int(* \fBMLXmousefun\fP) (int button, int \fBx\fP, int \fBy\fP, void *param)"
.br
.ti -1c
.RI "typedef struct \fBs_callback\fP \fBt_callback\fP"
.br
.ti -1c
.RI "typedef struct \fBs_fps\fP \fBt_fps\fP"
.br
.ti -1c
.RI "typedef struct \fBs_renderer\fP \fBt_renderer\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBwindow_size\fP { \fBSMALLEST\fP, \fBSMALLEST_PLUS\fP, \fBSMALLER\fP, \fBSMALLER_PLUS\fP, \fBSMALL\fP, \fBSMALL_PLUS\fP, \fBLARGE\fP, \fBLARGE_PLUS\fP, \fBLARGER\fP, \fBLARGER_PLUS\fP, \fBLARGEST\fP, \fBFULLSCREEN\fP, \fBWSLEN\fP }"
.br
.ti -1c
.RI "enum \fBe_drawing_mode\fP { \fBMLX\fP, \fBGL\fP, \fBDMLEN\fP }"
.br
.ti -1c
.RI "enum \fBe_mlx_mode\fP { \fBMONO\fP, \fBMULTIPLE\fP, \fBINDEPENDANT\fP, \fBRMLEN\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBinit\fP (void)"
.br
.ti -1c
.RI "\fBt_window\fP * \fBnew_window\fP (\fBt_mlx_context\fP *mlx_context, int size_x, int size_y, char *title)"
.br
.ti -1c
.RI "int \fBclear_window\fP (\fBt_mlx_context\fP *mlx_context, \fBt_window\fP *\fBwindow\fP)"
.br
.ti -1c
.RI "int \fBpixel_put\fP (\fBt_mlx_context\fP *mlx_context, \fBt_window\fP *\fBwindow\fP, int \fBx\fP, int \fBy\fP, int color)"
.br
.ti -1c
.RI "t_vec4f * \fBnew_vertices\fP (unsigned int size)"
.br
.ti -1c
.RI "void \fBline\fP (t_vec4f *vertices, unsigned int size, unsigned int grain)"
.br
.ti -1c
.RI "void \fBcube\fP (t_vec4f *vertices, unsigned int size, unsigned int grain)"
.br
.ti -1c
.RI "void \fBcircle\fP (t_vec4f *vertices, unsigned int size, unsigned int grain)"
.br
.ti -1c
.RI "void \fBinf_cone\fP (t_vec4f *vertices, unsigned int size, unsigned int grain)"
.br
.ti -1c
.RI "void \fBlarge_cube\fP (t_vec4f *v_pos, unsigned int size, unsigned int grain)"
.br
.ti -1c
.RI "char * \fBload_shader\fP (char *filename)"
.br
.ti -1c
.RI "int \fBcompile_shader\fP (int type, unsigned int prog)"
.br
.ti -1c
.RI "unsigned int \fBmake_shader\fP (int type, char *path)"
.br
.ti -1c
.RI "void \fBinit_renderer\fP (\fBt_renderer\fP *r)"
.br
.ti -1c
.RI "void \fBassign_shader\fP (\fBt_renderer\fP *r, char *v_path, char *f_path)"
.br
.ti -1c
.RI "int \fBrender\fP (\fBt_window\fP *\fBwindow\fP)"
.br
.ti -1c
.RI "void \fBerror_callback\fP (int error, const char *message)"
.br
.ti -1c
.RI "void \fBkey_callback\fP (GLFWwindow *\fBwindow\fP, int key, int scancode, int action, int mods)"
.br
.ti -1c
.RI "void \fBresize_callback\fP (GLFWwindow *\fBwindow\fP, int width, int height)"
.br
.ti -1c
.RI "void \fBmouse_button_callback\fP (GLFWwindow *\fBwindow\fP, int button, int action, int mods)"
.br
.ti -1c
.RI "void \fBscroll_callback\fP (GLFWwindow *\fBwindow\fP, double xoffset, double yoffset)"
.br
.ti -1c
.RI "void \fBapply_callback\fP (\fBt_window\fP *\fBwindow\fP, \fBt_callback\fP *callback)"
.br
.ti -1c
.RI "void \fBfocus_test\fP (GLFWwindow *\fBwindow\fP, int action)"
.br
.ti -1c
.RI "void \fBdestroy_callback\fP (GLFWwindow *\fBwindow\fP)"
.br
.ti -1c
.RI "void \fBcursor_pos\fP (GLFWwindow *, double, double)"
.br
.ti -1c
.RI "void \fBpos_callback\fP (GLFWwindow *\fBwindow\fP, int \fBx\fP, int \fBy\fP)"
.br
.ti -1c
.RI "int \fBmouse_hook\fP (\fBt_window\fP *\fBwindow\fP, int(*\fBf\fP)(), void *param)"
.br
.ti -1c
.RI "void \fBloop_hook\fP (\fBt_mlx_context\fP *mlx_context, int(*\fBf\fP)(), void *param)"
.br
.ti -1c
.RI "void \fBversion\fP (void)"
.br
.ti -1c
.RI "void \fBinit_fps\fP (\fBt_fps\fP *fps)"
.br
.ti -1c
.RI "void \fBrun_fps\fP (\fBt_window\fP *\fBwindow\fP, \fBt_fps\fP *fps)"
.br
.ti -1c
.RI "void * \fBnew_image\fP (\fBt_mlx_context\fP *mlx_context, int width, int height)"
.br
.ti -1c
.RI "char * \fBget_data_addr\fP (\fBt_image\fP *mlx_context, int *bits_per_pixel, int *size_line, int *endian)"
.br
.ti -1c
.RI "int \fBput_image_to_window\fP (\fBt_mlx_context\fP *mlx_context, \fBt_window\fP *\fBwindow\fP, \fBt_image\fP *\fBimage\fP, int \fBx\fP, int \fBy\fP)"
.br
.ti -1c
.RI "int \fBloop\fP (\fBt_mlx_context\fP *mc)"
.br
.ti -1c
.RI "void \fBhook\fP (\fBt_window\fP *\fBwindow\fP, int x_event, int x_mask, int(*\fBf\fP)(), void *param)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBt_callback\fP \fBg_callback\fP"
.br
.ti -1c
.RI "\fBt_mlx_context\fP \fBg_mlx_context\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define GLFW_INCLUDE_GLCOREARB"

.SS "#define GLFW_INCLUDE_GLEXT"

.SS "#define PARTICULE_HEIGHT   1024"

.SS "#define PARTICULE_WIDTH   1024"

.SS "#define VNBR   (\fBPARTICULE_WIDTH\fP * \fBPARTICULE_HEIGHT\fP)"

.SH "Typedef Documentation"
.PP 
.SS "typedef double t_vec4d __attribute__((ext_vector_type(4)))"

.SS "typedef void(* MLXinitearlyfun) (\fBt_mlx_context\fP *)"

.SS "typedef void(* MLXinitlatefun) (\fBt_mlx_context\fP *)"

.SS "typedef void(* MLXloopearlyfun) (\fBt_mlx_context\fP *)"

.SS "typedef int(* MLXloopfun) (void *param)"

.SS "typedef void(* MLXlooplatefun) (\fBt_mlx_context\fP *)"

.SS "typedef int(* MLXmousefun) (int button, int \fBx\fP, int \fBy\fP, void *param)"

.SS "typedef void(* MLXwindowclosefun) (\fBt_mlx_context\fP *, \fBt_window\fP *)"

.SS "typedef void(* MLXwindowresize) (\fBt_mlx_context\fP *, \fBt_window\fP *)"

.SS "typedef struct \fBs_callback\fP \fBt_callback\fP"

.SS "typedef struct \fBs_fps\fP \fBt_fps\fP"

.SS "typedef struct \fBs_image_list\fP \fBt_image\fP"

.SS "typedef struct \fBs_mlx_context\fP \fBt_mlx_context\fP"

.SS "typedef struct \fBs_renderer\fP \fBt_renderer\fP"

.SS "typedef struct \fBs_window\fP \fBt_window\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBe_drawing_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMLX \fP\fP
.TP
\fB\fIGL \fP\fP
.TP
\fB\fIDMLEN \fP\fP
.SS "enum \fBe_mlx_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMONO \fP\fP
.TP
\fB\fIMULTIPLE \fP\fP
.TP
\fB\fIINDEPENDANT \fP\fP
.TP
\fB\fIRMLEN \fP\fP
.SS "enum \fBwindow_size\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISMALLEST \fP\fP
640, 480 
.TP
\fB\fISMALLEST_PLUS \fP\fP
800, 600 
.TP
\fB\fISMALLER \fP\fP
1024, 576 
.TP
\fB\fISMALLER_PLUS \fP\fP
1024, 768 
.TP
\fB\fISMALL \fP\fP
1280, 720 
.TP
\fB\fISMALL_PLUS \fP\fP
1344, 756 
.TP
\fB\fILARGE \fP\fP
1280, 960 
.TP
\fB\fILARGE_PLUS \fP\fP
1344, 1008 
.TP
\fB\fILARGER \fP\fP
1600, 900 
.TP
\fB\fILARGER_PLUS \fP\fP
1600, 1200 
.TP
\fB\fILARGEST \fP\fP
2048, 1152 
.TP
\fB\fIFULLSCREEN \fP\fP
2560, 1440 
.TP
\fB\fIWSLEN \fP\fP
\fBwindow_size\fP len 
.SH "Function Documentation"
.PP 
.SS "void apply_callback (\fBt_window\fP * window, \fBt_callback\fP * callback)"
Batch apply of a \fBt_callback\fP on a \fBt_window\fP 
.PP
\fBTodo\fP
.RS 4
Find out a better way to achieve that 
.RE
.PP

.SS "void assign_shader (\fBt_renderer\fP * r, char * v_path, char * f_path)"
Internal tool for setting up shaders in a \fBt_renderer\fP\&. 
.SS "void circle (t_vec4f * vertices, unsigned int size, unsigned int grain)"

.SS "int clear_window (\fBt_mlx_context\fP * mlx_context, \fBt_window\fP * window)"

.PP
\fBTodo\fP
.RS 4
Need to be reworked Clears a \fBt_window\fP 
.RE
.PP

.SS "int compile_shader (int type, unsigned int prog)"
Compiles a shader given GL_VERTEX_SHADER | GL_FRAGMENT_SHADER as an argument\&. 
.SS "void cube (t_vec4f * vertices, unsigned int size, unsigned int grain)"

.SS "void cursor_pos (GLFWwindow *, double, double)"

.SS "void destroy_callback (GLFWwindow * window)"

.PP
\fBDeprecated\fP
.RS 4
Useless/Forgiven Usage 
.RE
.PP

.SS "void error_callback (int error, const char * description)"

.PP
\fBDeprecated\fP
.RS 4
Useless/Forgiven Usage 
.RE
.PP

.SS "void focus_test (GLFWwindow * window, int action)"
The handler for the GLFW focus callback 
.PP
\fBTodo\fP
.RS 4
Should trigger a userland MLX focus callback 
.RE
.PP

.SS "char* get_data_addr (\fBt_image\fP * image, int * bits_per_pixel, int * size_line, int * endian)"
Unwrap the data address from a \fBt_image\fP\&. 
.SS "void hook (\fBt_window\fP * window, int x_event, int x_mask, int(*)() f, void * param)"
Generic event setter\&. 
.SS "void inf_cone (t_vec4f * vertices, unsigned int size, unsigned int grain)"

.SS "void* init (void)"
Global _gl init\&. Calls \fBt_callback\&.initearly\fP, \fBt_callback\&.initlate\fP 
.SS "void init_fps (\fBt_fps\fP * fps)"
Init a \fBt_fps\fP\&. 
.SS "void init_renderer (\fBt_renderer\fP * r)"
A basic \fBt_renderer\fP init\&. 
.SS "void key_callback (GLFWwindow * window, int key, int scancode, int action, int mods)"
The default key callback \fBg_callback\fP 
.SS "void large_cube (t_vec4f * v_pos, unsigned int size, unsigned int grain)"

.SS "void line (t_vec4f * vertices, unsigned int size, unsigned int grain)"

.SS "char* load_shader (char * filename)"
Loads a shader path file to a char *\&. 
.SS "int loop (\fBt_mlx_context\fP * mc)"
Global _gl loop\&. Render each user's window\&. Calls \fBt_callback\&.earlyloop\fP, \fBt_callback\&.loop\fP, \fBt_callback\&.lateloop\fP 
.SS "void loop_hook (\fBt_mlx_context\fP * mlx_context, int(*)() f, void * param)"
The loop_callback setter 
.PP
\fBTodo\fP
.RS 4
Handle param 
.RE
.PP

.SS "unsigned int make_shader (int type, char * path)"
Shorthand \fBload_shader\fP + \fBcompile_shader\fP 
.SS "void mouse_button_callback (GLFWwindow * window, int button, int action, int mods)"
The handler for the GLFW mouse button callback 
.PP
\fBTodo\fP
.RS 4
Should trigger a userland MLX mouse button callback 
.RE
.PP

.SS "int mouse_hook (\fBt_window\fP * window, int(*)() f, void * param)"
The loop_callback setter 
.PP
\fBTodo\fP
.RS 4
Handle param 
.RE
.PP

.SS "void* new_image (\fBt_mlx_context\fP * mlx_context, int width, int height)"
Creates a new \fBt_image\fP based on the MLX image's format\&. 
.SS "t_vec4f* new_vertices (unsigned int size)"

.SS "\fBt_window\fP* new_window (\fBt_mlx_context\fP * mlx_context, int size_x, int size_y, char * title)"
Create a new window in respect of MLX's windows 
.SS "int pixel_put (\fBt_mlx_context\fP * mlx_context, \fBt_window\fP * window, int x, int y, int color)"

.PP
\fBTodo\fP
.RS 4
Need to be reworked Put a pixel into a \fBt_window\fP in respect to MLX's 
.RE
.PP

.SS "void pos_callback (GLFWwindow * window, int x, int y)"

.SS "int put_image_to_window (\fBt_mlx_context\fP * mlx_context, \fBt_window\fP * window, \fBt_image\fP * image, int x, int y)"
Put a \fBt_image\fP to a \fBt_window\fP\&. 
.SS "int render (\fBt_window\fP * window)"
The basic render function\&. 
.PP
\fBDeprecated\fP
.RS 4
You must choose between rendering a renderer or a window\&. 
.RE
.PP

.SS "void resize_callback (GLFWwindow * window, int width, int height)"
The handler for the GLFW resize callback 
.PP
\fBTodo\fP
.RS 4
Should trigger a userland MLX resize callback 
.RE
.PP

.SS "void run_fps (\fBt_window\fP * window, \fBt_fps\fP * fps)"
Update a \fBt_fps\fP\&. 
.SS "void scroll_callback (GLFWwindow * window, double xoffset, double yoffset)"
The handler for the GLFW scroll callback 
.PP
\fBTodo\fP
.RS 4
Should trigger a userland MLX scroll callback 
.RE
.PP

.SS "void version (void)"
Version 
.SH "Variable Documentation"
.PP 
.SS "\fBt_callback\fP g_callback"
Default \fBt_callback\fP value 
.SS "\fBt_mlx_context\fP g_mlx_context"
Default \fBt_mlx_context\fP value 
.SH "Author"
.PP 
Generated automatically by Doxygen for _gl from the source code\&.
